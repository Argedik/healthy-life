Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/.dockerignore
Dosya İçeriği:
**/target

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/Cargo.toml
Dosya İçeriği:
[package]
name="web_app"
version="0.1.0"
edition="2021"

[dependencies]
# react js benzeri bir yapıya sahip wasm kullanarak tarayıcıda çalışan eklendi.
yew = { version = "0.21", features = ["csr"] }

wasm-bindgen = "0.2.99"
# Serde , Rust dilinde veri serileştirme ve seriyi çözme (deserialization) işlemlerini yapar.
serde = { version = "1.0.216", features = ["derive"]}

# Reqwasm, web tarayıcısında HTTP istekleri yapmak için kullanılan bir kütüphanedir. Fetch API'yi sarmalar ve Rust ile web tabanlı REST API çağrıları yapmanızı sağlar.
reqwasm = "0.5"
# web-sys ve wasm-bindgen sayesinde target klasörü içine wasm dosyalarımız oluşturuluyor
web-sys = { version = "0.3", features = ["Window", "Document", "Element"] }
wasm-bindgen-futures = "0.4"
serde_json = "1.0"

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/Dockerfile
Dosya İçeriği:
# Rust'ın en son resmi Docker imajını kullanıyoruz.
FROM rust:latest

# Çalışma dizini
WORKDIR /app

#  WebAssembly hedefini ekliyoruz.
RUN rustup target add wasm32-unknown-unknown

# Trunk'ı kuruyoruz.
RUN cargo install trunk cargo-watch

# Bağımlılıkları önbelleğe almak için Cargo.toml ve Cargo.lock dosyalarını kopyala
COPY Cargo.toml Cargo.lock ./

# Bağımlılıkları indirme
RUN mkdir src
RUN echo "fn main() {}" > src/main.rs

#Bağımlılıkları indiriyoruz.
RUN cargo fetch

# Tüm projeyş kopyala
COPY . .

# Port açıyoruz.
EXPOSE 8080

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/index.html
Dosya İçeriği:
<!DOCTYPE html>
<html lang="tr">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link data-trunk rel="copy-dir" href="static" />
		<link data-trunk rel="scss" href="./static/styles/index.scss" />
		<title>Besin Uygulaması</title>
	</head>
	<body>
		<div id="app"></div>
		<script type="module"></script>
	</body>
</html>


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/card/card.html
Dosya İçeriği:
<div class="card">
	<div class="image-container">
		<p>Yemek resmi</p>
	</div>
	<div class="info-container">
		<p>Resim Açıklaması</p>
		<p>Puanı, Maliyeti</p>
	</div>
</div>


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/card/card.scss
Dosya İçeriği:
.card {
	width: 200px;
	background-color: teal;
	border-radius: 15px;
	overflow: hidden;
	box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	margin: 20px auto;

	.image-container {
		height: 150px;
		display: flex;
		justify-content: center;
		align-items: center;
		background-color: #fff;

		p {
			margin: 0;
			color: #333;
			font-weight: bold;
		}
	}

	.info-container {
		padding: 15px;
		text-align: center;
		background-color: #f9f9f9;

		p {
			margin: 5px 0;
			color: #666;
			font-size: 14px;
		}
	}
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/card/card_view.rs
Dosya İçeriği:
use yew::prelude::*;

#[function_component(Card)]
pub fn card_view() -> Html {
    let card_container = include_str!("card.html");
    html! {
        <div>
            { Html::from_html_unchecked(card_container.into()) }
        </div>
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/card/mod.rs
Dosya İçeriği:
pub mod card_view;
pub use card_view::Card;

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/card/three_d_cards/mod.rs
Dosya İçeriği:
pub mod three_d_cards_view;
pub use three_d_cards_view::*;

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/card/three_d_cards/three_d_cards.scss
Dosya İçeriği:
.three-d-list-container {
	display: flex;
	justify-content: center;
	align-items: center;
	min-height: 100vh;
	background: linear-gradient(
		45deg,
		var(--tertiary-color),
		var(--primary-color)
	);
}

.three-d-list-container ul {
	position: relative;
	transform-style: preserve-3d;
	perspective: 31rem;
	display: flex;
	flex-direction: column;
	gap: 0;
	transition: 0.5s;
}

.three-d-list-container ul li {
	position: relative;
	list-style: none;
	width: 28rem;
	height: 6rem;
	padding: 1rem;
	background: var(--secondary-color);
	gap: 1.25rem;
	display: flex;
	justify-content: flex-start;
	align-items: center;
	border-radius: 0.5rem;
	box-shadow: 0 -15px 25px rgba(0, 0, 0, 0.25);
	transition: 0.5s;
	transition-delay: calc(var(--i) * 0.05s);
}

.three-d-list-container ul li:nth-child(1) {
	transform: translateZ(-5rem) translateY(1.25rem);
	opacity: 0.6;
}

.three-d-list-container ul li:nth-child(3) {
	transform: translateZ(5rem) translateY(-2rem);
	background: var(--tertiary-color);
}

.three-d-list-container ul li:nth-child(4) {
	transform: translateZ(10rem) translateY(-5rem);
	background: var(--tertiary-color);
}

.three-d-list-container ul:hover {
	gap: 2rem;
}

.three-d-list-container ul:hover li {
	opacity: 1;
	background: var(--tertiary-color);
	transform: translateZ(0) translateY(0);
}

.three-d-list-container ul li img {
	max-width: 4.5rem;
}

ul li .content {
	width: 100%;
	cursor: pointer;
}

ul li .content h4 {
	font-weight: 600;
	color: var(--tertiary-color);
}

ul li .content p {
	position: relative;
	color: var(--primary-color);
	line-height: 1rem;
	width: 100%;
}

ul li .content span {
	position: absolute;
	top: 0;
	right: 0;
	font-size: 0, 75rem;
	color: var(--secondary-color);
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/card/three_d_cards/three_d_cards_view.html
Dosya İçeriği:
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Document</title>
		<link rel="stylesheet" href="css/style.css" />
	</head>
	<body>
		<div class="three-d-list-container">
			<ul>
				<li style="--i: 1">
					<img
						src="https://fastly.picsum.photos/id/123/400/200.jpg?hmac=bjWqtYzEF3fJaLLsW59yPr3QH9Cmu8rGPUK8nBKlCTM"
					/>
					<div class="content">
						<h4></h4>
						<p>
							Lorem ipsum dolor sit amet<br />
							consectetur adipisicing elit.
						</p>
					</div>
				</li>
				<li style="--i: 2">
					<img
						src="https://fastly.picsum.photos/id/588/400/200.jpg?hmac=cx5Kq84rDLT0Dc2dYYSoZP3PCROBKPayd1dAVtEyx44"
					/>
					<div class="content">
						<h4></h4>
						<p>
							Lorem ipsum dolor sit amet<br />
							consectetur adipisicing elit.
						</p>
					</div>
				</li>
				<li style="--i: 3">
					<img
						src="https://fastly.picsum.photos/id/275/400/200.jpg?hmac=iJ3-rO7j2MiwDCAHDOcoVH3q_5J0Z4ry0rTg3QWyG2s"
					/>
					<div class="content">
						<h4></h4>
						<p>
							Lorem ipsum dolor sit amet<br />
							consectetur adipisicing elit.
						</p>
					</div>
				</li>
				<li style="--i: 4">
					<img
						src="https://fastly.picsum.photos/id/851/400/200.jpg?hmac=Yk7CGS-p0BQhvfjGvjue86sS6ja03oKw0JKPMR4ImWI"
					/>
					<div class="content">
						<h4></h4>
						<p>
							Lorem ipsum dolor sit amet<br />
							consectetur adipisicing elit.
						</p>
					</div>
				</li>
			</ul>
		</div>
		<div id="embeddedContent"></div>
		<script src="js/index.js"></script>
	</body>
</html>


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/card/three_d_cards/three_d_cards_view.rs
Dosya İçeriği:
use std::fs;
use std::io::{self, Write};
use std::path::Path;

// fn main() {
//     match embed_content("../header/basic/index.html") {
//         Ok(_) => println!("Content embedded successfully!"),
//         Err(e) => eprintln!("Error: {:?}", e),
//     }
// }

fn embed_content(file_path: &str) -> io::Result<()> {
    let content = fs::read_to_string(file_path)?;
    inject_html("embeddedContent", &content)?;
    
    add_stylesheet("../header/basic/css/style.css")?;
    add_script("../header/basic/js/index.js")?;
    Ok(())
}

fn inject_html(element_id: &str, content: &str) -> io::Result<()> {
    println!("Injecting HTML to element with id '{}':\n{}", element_id, content);
    Ok(())
}

fn add_stylesheet(file_path: &str) -> io::Result<()> {
    if Path::new(file_path).exists() {
        println!("Linking stylesheet: {}", file_path);
        Ok(())
    } else {
        Err(io::Error::new(io::ErrorKind::NotFound, "Stylesheet not found"))
    }
}

fn add_script(file_path: &str) -> io::Result<()> {
    if Path::new(file_path).exists() {
        println!("Linking script: {}", file_path);
        Ok(())
    } else {
        Err(io::Error::new(io::ErrorKind::NotFound, "Script not found"))
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/components.scss
Dosya İçeriği:
@use './card/card.scss' as *;
@use './home_page/home_page.scss' as *;
@use './nav_bar/nav_bar.scss' as *;


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/fridge_content/mod.rs
Dosya İçeriği:


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/home_page/home_page.html
Dosya İçeriği:
<div class="container">
	<img src="/static/images/home-page/home-page.png" alt="Home Page Image" />
	<a href="/analysis-result" class="label analysis-result"
		>Tahıl sonucuna göre</a
	>
	<a href="/fridge-content" class="label fridge-content">Dolapta ne var?</a>
	<a href="/daily-menu" class="label daily-menu">Günün Menüsü</a>
	<a href="/special-meal" class="label special-meal">Özel öğün beslenmesi</a>
	<a href="/healthy-diets" class="label healthy-diets">Sağlıklı diyetler</a>
</div>


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/home_page/home_page.rs
Dosya İçeriği:
use yew::prelude::*;
  // <div class={css!("color: blue;")}>{"Hello blue!"}</div

#[function_component(HomePage)]
pub fn home_page_component() -> Html {
  let html_content = include_str!("home_page.html"); 

  html! {
      <div>
          { Html::from_html_unchecked(html_content.into()) }
      </div>
  }
}

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/home_page/home_page.scss
Dosya İçeriği:
html,
body {
	margin: 0;
	padding: 0;
	width: 100%;
	height: 100%;
	font-family: 'Poppins', sans-serif;
}

div:has(.container) {
	height: 100%;
	width: 100%;
}

.container {
	position: relative;
	width: 100%; /* Ekran genişliği */
	height: 100%; /* Ekran yüksekliği */
	overflow: hidden; /* Taşan alanları gizler */
}

.container img {
	width: 100%; /* Genişlik, yüksekliğe göre ayarlanır */
	height: 100%; /* Ekran yüksekliğini tamamen kaplar */
	object-fit: cover; /* Görseli kırparak sığdırır */
	position: absolute;
}

.label {
	position: absolute;
	padding: 5px 10px;
	font-weight: bold;
	color: white;
	text-decoration: none;
	transition: background-color 0.3s ease, color 0.3s ease;
	cursor: pointer;
	border-radius: 5px;

	&:hover {
		background-color: #2e8b57;
		color: #fff;
		box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.2);
	}
}

/* Label Positions */
.analysis-result {
	top: 5.3%;
	left: 50.5%;
}
.fridge-content {
	top: 15.5%;
	left: 27.8%;
}
.daily-menu {
	top: 31%;
	left: 17%;
}
.special-meal {
	bottom: 48.8%;
	left: 13.6%;
}
.healthy-diets {
	bottom: 32.2%;
	left: 17.2%;
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/home_page/mod.rs
Dosya İçeriği:
pub mod home_page;
pub use home_page::HomePage;

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/mod.rs
Dosya İçeriği:
pub mod nav_bar;
pub mod home_page;
pub mod card;

pub use nav_bar::NavBar;
pub use home_page::HomePage;
pub use card::Card;


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/nav_bar/mod.rs
Dosya İçeriği:
pub mod nav_bar;
pub use nav_bar::NavBar;

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/nav_bar/nav_bar.html
Dosya İçeriği:


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/nav_bar/nav_bar.rs
Dosya İçeriği:
use yew::prelude::*;

#[function_component(NavBar)]
pub fn nav_bar_component() -> Html {
  html! {
    <nav>
      <ul>
        <li>
          <a href="/"> {"Ana Sayfa"} </a>
        </li>
        <li>
          <a href="/stats"> {"İstatistikler"} </a>
        </li>
      </ul>
    </nav>
  }
}

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/nav_bar/nav_bar.scss
Dosya İçeriği:


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/main.rs
Dosya İçeriği:
use yew::prelude::*;
mod components;
mod screens;

use components::{NavBar, HomePage, Card};
use screens::fridge_content::FridgeContent;

#[function_component(App)]
fn app() -> Html {
  html! {
    <>
      // <NavBar />
      // <HomePage />
      <FridgeContent />
      // <Card />
    </>
  }
}

fn main() {
  yew::Renderer::<App>::new().render();
}

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/analysis_result/analysis_result.html
Dosya İçeriği:
﻿<div class="analysis_result-container">
    <h1>analysis_result Component</h1>
</div>


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/analysis_result/analysis_result.rs
Dosya İçeriği:
﻿use yew::prelude::*;

#[function_component(AnalysisResult)]
pub fn analysis_result_component() -> Html {
    let html_content = include_str!("analysis_result.html"); 
    html! {
        <div>
            { Html::from_html_unchecked(html_content.into()) }
        </div>
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/analysis_result/analysis_result.scss
Dosya İçeriği:
﻿.analysis_result-container {
    background-color: #f0f0f0;
    padding: 20px;
    h1 {
        color: #333;
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/analysis_result/mod.rs
Dosya İçeriği:
pub mod analysis_result;
pub use analysis_result::AnalysisResult;


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/daily_menu/daily_menu.html
Dosya İçeriği:
﻿<div class="daily_menu-container">
    <h1>daily_menu Component</h1>
</div>


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/daily_menu/daily_menu.rs
Dosya İçeriği:
﻿use yew::prelude::*;

#[function_component(DailyMenu)]
pub fn daily_menu_component() -> Html {
    let html_content = include_str!("daily_menu.html"); 
    html! {
        <div>
            { Html::from_html_unchecked(html_content.into()) }
        </div>
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/daily_menu/daily_menu.scss
Dosya İçeriği:
﻿.daily_menu-container {
    background-color: #f0f0f0;
    padding: 20px;
    h1 {
        color: #333;
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/daily_menu/mod.rs
Dosya İçeriği:
pub mod daily_menu;
pub use daily_menu::DailyMenu;


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/fridge_content/fridge_content.html
Dosya İçeriği:
﻿<div class="fridge-content-wrapper">
	<h2>Dolapta ne var?</h2>
	<div class="fridge-content-list">
		<!-- Burada RS tarafında dinamik olarak liste render edilecek -->
	</div>
</div>


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/fridge_content/fridge_content.scss
Dosya İçeriği:
﻿.fridge-content-wrapper {
	padding: 20px;
	background-color: #f0f0f0;
	min-height: 100vh;

	h2 {
		color: #333;
		margin-bottom: 20px;
		font-size: 24px;
		font-weight: bold;
	}

	.fridge-content-list {
		display: flex;
		flex-direction: column;
		gap: 15px;
	}

	.fridge-item {
		display: flex;
		align-items: center;
		background: white;
		border-radius: 10px;
		padding: 10px;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

		.item-number {
			font-weight: bold;
			color: #2e8b57;
			font-size: 20px;
			margin-right: 20px;
		}

		.item-image {
			width: 50px;
			height: 50px;
			margin-right: 20px;
			border-radius: 8px;
			overflow: hidden;

			img {
				width: 100%;
				height: 100%;
				object-fit: cover;
			}
		}

		.item-title {
			font-size: 18px;
			color: #333;
			flex: 1;
		}
	}
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/fridge_content/fridge_content_view.rs
Dosya İçeriği:
﻿use wasm_bindgen_futures::spawn_local;
use yew::prelude::*;
use serde::{Serialize, Deserialize};
use reqwasm::http::Request;
use web_sys::HtmlInputElement;

#[derive(Debug, Clone, PartialEq, Deserialize, Serialize)]
struct FridgeItem {
    number: u32,
    image_url: String,
    title: String,
}

#[function_component(FridgeContent)]
pub fn fridge_content_view() -> Html {
    let spreadsheet_id = "YOUR_SPREADSHEET_ID_HERE"; // Aynı ID backend ile uyuşmalı
    let items = use_state(|| Vec::<FridgeItem>::new());
    let editing_item = use_state(|| None as Option<FridgeItem>);
    let new_number = use_state(|| 0u32);
    let new_image_url = use_state(|| "".to_string());
    let new_title = use_state(|| "".to_string());

    let fetch_items = {
        let items = items.clone();
        let spreadsheet_id = spreadsheet_id.to_string();
        Callback::from(move |_| {
            let items = items.clone();
            let url = format!("http://127.0.0.1:8081/fridge_items?spreadsheet_id={}", spreadsheet_id);
            spawn_local(async move {
                if let Ok(response) = Request::get(&url).send().await {
                    if response.ok() {
                        if let Ok(fetched_items) = response.json::<Vec<FridgeItem>>().await {
                            items.set(fetched_items);
                        }
                    }
                }
            });
        })
    };

    {
        let fetch_items = fetch_items.clone();
        use_effect(move || {
            fetch_items.emit(());
            || ()
        });
    }

    // Create (Add New Item)
    let on_add_click = {
        let spreadsheet_id = spreadsheet_id.to_string();
        let number = *new_number;
        let image_url = (*new_image_url).clone();
        let title = (*new_title).clone();
        let fetch_items = fetch_items.clone();
        Callback::from(move |_| {
            let fetch_items = fetch_items.clone();
            let url = format!("http://127.0.0.1:8081/fridge_items?spreadsheet_id={}", spreadsheet_id);
            let item = FridgeItem {
                number,
                image_url: image_url.clone(),
                title: title.clone(),
            };
            spawn_local(async move {
                let res = Request::post(&url)
                    .header("Content-Type","application/json")
                    .body(serde_json::to_string(&item).unwrap())
                    .send().await;
                if let Ok(r) = res {
                    if r.ok() {
                        fetch_items.emit(());
                    }
                }
            });
        })
    };

    // Delete
    let on_delete = {
        let fetch_items = fetch_items.clone();
        let spreadsheet_id = spreadsheet_id.to_string();
        Callback::from(move |row: u32| {
            let fetch_items = fetch_items.clone();
            let url = format!("http://127.0.0.1:8081/fridge_items/delete?spreadsheet_id={}&row={}", spreadsheet_id, row);
            spawn_local(async move {
                let res = Request::delete(&url).send().await;
                if let Ok(r) = res {
                    if r.ok() {
                        fetch_items.emit(());
                    }
                }
            });
        })
    };

    // Update
    let on_save_update = {
        let fetch_items = fetch_items.clone();
        let editing_item = editing_item.clone();
        let spreadsheet_id = spreadsheet_id.to_string();
        Callback::from(move |item: FridgeItem| {
            let fetch_items = fetch_items.clone();
            let editing_item = editing_item.clone();
            let url = format!("http://127.0.0.1:8081/fridge_items/update?spreadsheet_id={}&row={}", spreadsheet_id, item.number);
            spawn_local(async move {
                let res = Request::put(&url)
                    .header("Content-Type","application/json")
                    .body(serde_json::to_string(&item).unwrap())
                    .send().await;
                if let Ok(r) = res {
                    if r.ok() {
                        editing_item.set(None);
                        fetch_items.emit(());
                    }
                }
            });
        })
    };

    let on_edit = {
        let editing_item = editing_item.clone();
        Callback::from(move |item: FridgeItem| {
            editing_item.set(Some(item));
        })
    };

    let editing = (*editing_item).clone();

    let html_content = include_str!("fridge_content.html");

    let item_list = items.iter().map(|item| {
        html! {
            <div class="fridge-item">
                <div class="item-number">{ item.number }</div>
                <div class="item-image">
                    <img src={item.image_url.clone()} alt={item.title.clone()} />
                </div>
                <div class="item-title">{ &item.title }</div>
                <button onclick={on_edit.reform({
                    let item = item.clone();
                    move |_| item.clone()
                })}>{"Düzenle"}</button>
                <button onclick={on_delete.reform(move |_| item.number)}>{"Sil"}</button>
            </div>
        }
    }).collect::<Html>();

    // New item form değişiklikleri
    let on_number_input = {
        let new_number = new_number.clone();
        Callback::from(move |e: InputEvent| {
            let input: HtmlInputElement = e.target_unchecked_into();
            if let Ok(val) = input.value().parse::<u32>() {
                new_number.set(val);
            }
        })
    };

    let on_image_input = {
        let new_image_url = new_image_url.clone();
        Callback::from(move |e: InputEvent| {
            let input: HtmlInputElement = e.target_unchecked_into();
            new_image_url.set(input.value());
        })
    };

    let on_title_input = {
        let new_title = new_title.clone();
        Callback::from(move |e: InputEvent| {
            let input: HtmlInputElement = e.target_unchecked_into();
            new_title.set(input.value());
        })
    };

    // Edit form inputları
    let (edit_number, edit_image_url, edit_title) = if let Some(editing) = editing.clone() {
        (editing.number.to_string(), editing.image_url, editing.title)
    } else {
        ("".to_string(), "".to_string(), "".to_string())
    };

    let edit_number_state = use_state(|| edit_number.clone());
    let edit_image_state = use_state(|| edit_image_url.clone());
    let edit_title_state = use_state(|| edit_title.clone());

    let on_edit_number_input = {
        let edit_number_state = edit_number_state.clone();
        Callback::from(move |e: InputEvent| {
            let input: HtmlInputElement = e.target_unchecked_into();
            edit_number_state.set(input.value());
        })
    };

    let on_edit_image_input = {
        let edit_image_state = edit_image_state.clone();
        Callback::from(move |e: InputEvent| {
            let input: HtmlInputElement = e.target_unchecked_into();
            edit_image_state.set(input.value());
        })
    };

    let on_edit_title_input = {
        let edit_title_state = edit_title_state.clone();
        Callback::from(move |e: InputEvent| {
            let input: HtmlInputElement = e.target_unchecked_into();
            edit_title_state.set(input.value());
        })
    };

    let on_edit_save_click = {
        let on_save_update = on_save_update.clone();
        let editing_item = editing_item.clone();
        let edit_number_state = edit_number_state.clone();
        let edit_image_state = edit_image_state.clone();
        let edit_title_state = edit_title_state.clone();
        Callback::from(move |_| {
            if let Ok(num) = edit_number_state.parse::<u32>() {
                let updated_item = FridgeItem {
                    number: num,
                    image_url: (*edit_image_state).clone(),
                    title: (*edit_title_state).clone(),
                };
                on_save_update.emit(updated_item);
                editing_item.set(None);
            }
        })
    };

    let on_edit_cancel_click = {
        let editing_item = editing_item.clone();
        Callback::from(move |_| {
            editing_item.set(None);
        })
    };

    html! {
        <div>
            { Html::from_html_unchecked(html_content.into()) }
            <div class="fridge-content-list">
                {item_list}
            </div>
            <hr/>
            <h3>{"Yeni Öğe Ekle"}</h3>
            <label>{"Numara: "}<input type="number" value={(*new_number).to_string()} oninput={on_number_input}/></label>
            <label>{"Resim URL: "}<input type="text" value={(*new_image_url).clone()} oninput={on_image_input}/></label>
            <label>{"Başlık: "}<input type="text" value={(*new_title).clone()} oninput={on_title_input}/></label>
            <button onclick={on_add_click}>{"Ekle"}</button>

            {if editing.is_some() {
                html! {
                    <div class="edit-form">
                        <h3>{"Düzenle"}</h3>
                        <label>{"Numara: "}<input type="number" value={(*edit_number_state).clone()} oninput={on_edit_number_input}/></label>
                        <label>{"Resim URL: "}<input type="text" value={(*edit_image_state).clone()} oninput={on_edit_image_input}/></label>
                        <label>{"Başlık: "}<input type="text" value={(*edit_title_state).clone()} oninput={on_edit_title_input}/></label>
                        <button onclick={on_edit_save_click}>{"Kaydet"}</button>
                        <button onclick={on_edit_cancel_click}>{"İptal"}</button>
                    </div>
                }
            } else {
                html! {}
            }}

        </div>
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/fridge_content/mod.rs
Dosya İçeriği:
pub mod fridge_content_view;
pub use fridge_content_view::FridgeContent;

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/healthy_diets/healthy_diets.html
Dosya İçeriği:
﻿<div class="healthy_diets-container">
    <h1>healthy_diets Component</h1>
</div>


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/healthy_diets/healthy_diets.rs
Dosya İçeriği:
﻿use yew::prelude::*;

#[function_component(HealthyDiets)]
pub fn healthy_diets_component() -> Html {
    let html_content = include_str!("healthy_diets.html"); 
    html! {
        <div>
            { Html::from_html_unchecked(html_content.into()) }
        </div>
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/healthy_diets/healthy_diets.scss
Dosya İçeriği:
﻿.healthy_diets-container {
    background-color: #f0f0f0;
    padding: 20px;
    h1 {
        color: #333;
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/healthy_diets/mod.rs
Dosya İçeriği:
pub mod healthy_diets;
pub use healthy_diets::HealthyDiets;


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/mod.rs
Dosya İçeriği:
pub mod healthy_diets;
pub mod special_meal;
pub mod daily_menu;
pub mod analysis_result;
pub mod fridge_content;

pub use analysis_result::AnalysisResult;
pub use fridge_content::FridgeContent;
pub use healthy_diets::HealthyDiets;
pub use special_meal::SpecialMenu;
pub use daily_menu::DailyMenu;

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/screens.scss
Dosya İçeriği:
@use './analysis-result/analysis-result.scss' as *;
@use './fridge-content/fridge-content.scss' as *;
@use './daily-menu/daily-menu.scss' as *;
@use './special-meal/special-meal.scss' as *;
@use './healthy-diets/healthy-diets.scss' as *;
@use './healthy_diets/healthy_diets.scss' as *;
@use './special_meal/special_meal.scss' as *;
@use './daily_menu/daily_menu.scss' as *;
@use './fridge_content/fridge_content.scss' as *;
@use './analysis_result/analysis_result.scss' as *;


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/special_meal/mod.rs
Dosya İçeriği:
pub mod special_meal;
pub use special_meal::SpecialMenu;


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/special_meal/special_meal.html
Dosya İçeriği:
﻿<div class="special_meal-container">
    <h1>special_meal Component</h1>
</div>


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/special_meal/special_meal.rs
Dosya İçeriği:
﻿use yew::prelude::*;

#[function_component(SpecialMenu)]
pub fn special_meal_component() -> Html {
    let html_content = include_str!("special_meal.html"); 
    html! {
        <div>
            { Html::from_html_unchecked(html_content.into()) }
        </div>
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/screens/special_meal/special_meal.scss
Dosya İçeriği:
﻿.special_meal-container {
    background-color: #f0f0f0;
    padding: 20px;
    h1 {
        color: #333;
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/static/images/home-page/home-page.png
Dosya İçeriği:
Dosya okunamadı veya metin dosyası değil.

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/static/styles/index.scss
Dosya İçeriği:
@use './_variables' as *;
@use './_mixins' as *;
@use './_globals' as *;
@use './typography' as *;

@use '../../src/components/components.scss' as *;


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/static/styles/_globals.scss
Dosya İçeriği:
@use './_variables' as *;
@use './_mixins' as *;
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

* {
	box-sizing: border-box;
	padding: 0;
}

html {
	font-size: 16px;
	margin: 0;
	padding: 0;
	width: 100%;
	height: 100%;
	font-family: 'Poppins', sans-serif;

	@include respond-to(sm) {
		font-size: 15px;
	}

	@include respond-to(xs) {
		font-size: 14px;
	}
}

body {
	width: 100%;
	height: 100%;
	line-height: 1.5;
	font-family: 'Poppins', sans-serif;
	color: $craft-color;
	background-color: transparent;
	margin: 0;
	padding: 0;
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/static/styles/_mixins.scss
Dosya İçeriği:
@use './_variables' as *;
@use 'sass:map';

@mixin flexCenter {
	display: flex;
	justify-content: center;
	align-items: center;
}

@mixin respond-to($breakpoint) {
	$breakpoints: (
		xs: $breakpoint-xs,
		sm: $breakpoint-sm,
		md: $breakpoint-md,
		lg: $breakpoint-lg,
	);
	@if $breakpoint == xs {
		@media (max-width: $breakpoint-xs) {
			@content;
		}
	} @else if $breakpoint == sm {
		@media (max-width: $breakpoint-sm) {
			@content;
		}
	} @else if $breakpoint == md {
		@media (max-width: $breakpoint-md) {
			@content;
		}
	} @else if $breakpoint == lg {
		@media (max-width: $breakpoint-lg) {
			@content;
		}
	}

	@media (max-width: map.get($breakpoints, $breakpoint)) {
		@content;
	}
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/static/styles/_typography.scss
Dosya İçeriği:
h1,
h2,
h3 {
	font-weight: 700;
}

p {
	line-height: 1.6;
	font-size: 1rem;
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/static/styles/_variables.scss
Dosya İçeriği:
$light-blue: #add8e6;
$sky-blue: #87ceeb;
$cobalt-blue: #0047ab;
$royal-blue: #4169e1;
$navy: #000080;
$sea-blue: #2e8b57;
$teal: #008080;
$turquoise: #40e0d0;
$dark-blue: #00008b;
$craft-color: #01303b;
$craft-white: #fff;

$breakpoint-xs: 576px; // X-Small devices (portrait phones)
$breakpoint-sm: 768px; // Small devices (landscape phones)
$breakpoint-md: 992px; // Medium devices (tablets)
$breakpoint-lg: 1200px; // Large devices (desktops)


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/Trunk.toml
Dosya İçeriği:
[build]
# cargo trunk ya da trunk serve ile proje başlatıldığında oluşturulacak klasör ve dosyaların kaydedileceği dizin
output = "dist"
watcher_ignore = [
    "dist/*",       # trunk'ın kendi build çıktıları
    "target/*",     # Rust'ın derleme çıktıları
    ".git/*",       # Git dosyaları
    "Dockerfile",   # Docker dosyaları
    "docker-compose.yml" # Compose dosyaları
]

# trunk serve komutunun 127.0.0.1 adresinde ve 8080 portunda çalışmasını sağlıyoruz
[serve]
addresses = ["127.0.0.1"]
port = 8080

# [[copy]]
# source = "static"
# dest = "."

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/versel.json
Dosya İçeriği:
{
	"rewrites": [
		{
			"source": "/pkg/:path*",
			"destination": "/pkg/:path*"
		},
		{
			"source": "/:path*",
			"destination": "/index.html"
		}
	]
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/webpack.config.js
Dosya İçeriği:
const path = require('path');

module.exports = {
	resolve: {
		alias: {
			'@images': path.resolve(__dirname, 'static/images'),
		},
	},
};


