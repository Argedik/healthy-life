Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/.dockerignore
Dosya İçeriği:
**/target

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/Cargo.toml
Dosya İçeriği:
[package]
name="web_app"
version="0.1.0"
edition="2021"

[dependencies]
yew = { version = "0.21", features = ["csr"] }
wasm-bindgen = "0.2.9"
serde = { version = "1.0", features = ["derive"]}
reqwasm = "0.5"
stylist = "0.13"


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/Dockerfile
Dosya İçeriği:
# Rust'ın en son resmi Docker imajını kullanıyoruz.
FROM rust:latest

# Çalışma dizini
WORKDIR /app

#  WebAssembly hedefini ekliyoruz.
RUN rustup target add wasm32-unknown-unknown

# Trunk'ı kuruyoruz.
RUN cargo install trunk cargo-watch

# Bağımlılıkları önbelleğe almak için Cargo.toml ve Cargo.lock dosyalarını kopyala
COPY Cargo.toml Cargo.lock ./

# Bağımlılıkları indirme
RUN mkdir src
RUN echo "fn main() {}" > src/main.rs

#Bağımlılıkları indiriyoruz.
RUN cargo fetch

# Tüm projeyş kopyala
COPY . .

# Port açıyoruz.
EXPOSE 8080

# Projeyi anlık olarak dinleyebilen kodlar
CMD ["trunk", "serve", "--watch", "--address", "0.0.0.0", "--port", "8080", "--public-url", "/"]


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/index.html
Dosya İçeriği:
<!DOCTYPE html>
<html lang="tr">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Besin Uygulaması</title>
	</head>
	<body>
		<div id="app"></div>
		<script type="module">
			import init from './pkg/besin_uygulamasi_frontend.js';
			init();
		</script>
	</body>
</html>


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/card.rs
Dosya İçeriği:
use yew::prelude::*;

#[function_component(Card)]
pub fn card() -> Html {
    html! {
        <div class="card">
            <div class="image-container">
                <p>{ "Yemek resmi" }</p>
            </div>
            <div class="info-container">
                <p>{ "Resim Açıklaması" }</p>
                <p>{ "Puanı, Maliyeti" }</p>
            </div>
        </div>
    }
}


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/home_page.rs
Dosya İçeriği:
use yew::prelude::*;

#[function_component(HomePage)]
pub fn home_page() -> Html {
  html! {
    <div>
      <h1>{ "Sağlık Uygulamasına Hoş Geldiniz!asd" }</h1>
    </div>
  }
}

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/mod.rs
Dosya İçeriği:
pub mod nav_bar;
pub mod home_page;
pub mod card;

pub use nav_bar::NavBar;
pub use home_page::HomePage;
pub use card::Card; 

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/components/nav_bar.rs
Dosya İçeriği:
use yew::prelude::*;

#[function_component(NavBar)]
pub fn nav_bar() -> Html {
  html! {
    <nav>
      <ul>
        <li>
          <a href="/"> {"Ana Sayfa"} </a>
        </li>
        <li>
          <a href="/stats"> {"İstatistikler"} </a>
        </li>
      </ul>
    </nav>
  }
}

Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/src/main.rs
Dosya İçeriği:
use yew::prelude::*;
mod components;

#[function_component(App)]
fn app() -> Html {
  html! {
    <>
      <components::NavBar />
      <components::HomePage />
      <components::Card />
    </>
  }
}

fn main() {
  yew::Renderer::<App>::new().render();
}



// use yew::prelude::*;
// use serde::{Deserialize, Serialize};
// use reqwasm::http::Request;

// #[derive(Serialize, Deserialize, Clone, PartialEq)]
// struct Food {
//     id: i64,
//     name: String,
//     calories: i32,
// }

// #[function_component(App)]
// fn app() -> Html {
//     let foods = use_state(Vec::<Food>::new);

//     {
//         let foods = foods.clone();
//         use_effect_with_deps(
//             move |_| {
//                 wasm_bindgen_futures::spawn_local(async move {
//                     let fetched_foods = Request::get("http://localhost:8080/foods")
//                         .send()
//                         .await
//                         .unwrap()
//                         .json::<Vec<Food>>()
//                         .await
//                         .unwrap();
//                     foods.set(fetched_foods);
//                 });
//                 || ()
//             },
//             (),
//         );
//     }

//     let name = use_state(String::new);
//     let calories = use_state(String::new);

//     let on_add_food = {
//         let name = name.clone();
//         let calories = calories.clone();
//         let foods = foods.clone();
//         Callback::from(move |_| {
//             let name_value = name.to_string();
//             let calories_value: i32 = calories.to_string().parse().unwrap_or(0);

//             wasm_bindgen_futures::spawn_local(async move {
//                 let new_food = Food {
//                     id: 0,
//                     name: name_value.clone(),
//                     calories: calories_value,
//                 };

//                 Request::post("http://localhost:8080/foods")
//                     .header("Content-Type", "application/json")
//                     .body(serde_json::to_string(&new_food).unwrap())
//                     .send()
//                     .await
//                     .unwrap();

//                 let updated_foods = Request::get("http://localhost:8080/foods")
//                     .send()
//                     .await
//                     .unwrap()
//                     .json::<Vec<Food>>()
//                     .await
//                     .unwrap();
//                 foods.set(updated_foods);
//             });
//         })
//     };

//     html! {
//         <div>
//             <h1>{"Besin Uygulaması"}</h1>
//             <input placeholder="Besin Adı" oninput={Callback::from(move |e: InputData| name.set(e.value))} />
//             <input placeholder="Kalori" oninput={Callback::from(move |e: InputData| calories.set(e.value))} />
//             <button onclick={on_add_food}>{"Ekle"}</button>
//         </div>
//     }
// }


Dosya Yolu: C:/Users/enes.gedik/Desktop/fe/besin-uygulamasi/frontend/web/Trunk.toml
Dosya İçeriği:
[build]
output = "dist"
watcher_ignore = [
    "dist/*",       # trunk'ın kendi build çıktıları
    "target/*",     # Rust'ın derleme çıktıları
    ".git/*",       # Git dosyaları
    "Dockerfile",   # Docker dosyaları
    "docker-compose.yml" # Compose dosyaları
]


